"use strict";exports.id=828,exports.ids=[828],exports.modules={2828:(e,r,n)=>{n.d(r,{fromIni:()=>b});var t=n(4740),i=n(2313);let o=(e,r,t)=>{let o={EcsContainer:async e=>{let{fromHttp:r}=await n.e(87).then(n.bind(n,3087)),{fromContainerMetadata:o}=await n.e(450).then(n.bind(n,1450));return t?.debug("@aws-sdk/credential-provider-ini - credential_source is EcsContainer"),(0,i.tS)(r(e??{}),o(e))},Ec2InstanceMetadata:async e=>{t?.debug("@aws-sdk/credential-provider-ini - credential_source is Ec2InstanceMetadata");let{fromInstanceMetadata:r}=await n.e(450).then(n.bind(n,1450));return r(e)},Environment:async e=>{t?.debug("@aws-sdk/credential-provider-ini - credential_source is Environment");let{fromEnv:r}=await Promise.resolve().then(n.bind(n,9677));return r(e)}};if(e in o)return o[e];throw new i.mV(`Unsupported credential source in profile ${r}. Got ${e}, expected EcsContainer or Ec2InstanceMetadata or Environment.`,{logger:t})},s=(e,{profile:r="default",logger:n}={})=>!!e&&"object"==typeof e&&"string"==typeof e.role_arn&&["undefined","string"].indexOf(typeof e.role_session_name)>-1&&["undefined","string"].indexOf(typeof e.external_id)>-1&&["undefined","string"].indexOf(typeof e.mfa_serial)>-1&&(a(e,{profile:r,logger:n})||l(e,{profile:r,logger:n})),a=(e,{profile:r,logger:n})=>{let t="string"==typeof e.source_profile&&void 0===e.credential_source;return t&&n?.debug?.(`    ${r} isAssumeRoleWithSourceProfile source_profile=${e.source_profile}`),t},l=(e,{profile:r,logger:n})=>{let t="string"==typeof e.credential_source&&void 0===e.source_profile;return t&&n?.debug?.(`    ${r} isCredentialSourceProfile credential_source=${e.credential_source}`),t},d=async(e,r,s,a={})=>{s.logger?.debug("@aws-sdk/credential-provider-ini - resolveAssumeRoleCredentials (STS)");let l=r[e];if(!s.roleAssumer){let{getDefaultRoleAssumer:e}=await n.e(529).then(n.bind(n,3529));s.roleAssumer=e({...s.clientConfig,credentialProviderLogger:s.logger,parentClientConfig:s?.parentClientConfig},s.clientPlugins)}let{source_profile:d}=l;if(d&&d in a)throw new i.mV(`Detected a cycle attempting to resolve credentials for profile ${(0,t.Jl)(s)}. Profiles visited: `+Object.keys(a).join(", "),{logger:s.logger});s.logger?.debug(`@aws-sdk/credential-provider-ini - finding credential resolver using ${d?`source_profile=[${d}]`:`profile=[${e}]`}`);let c=d?m(d,{...r,[d]:{...r[d],role_arn:l.role_arn??r[d].role_arn}},s,{...a,[d]:!0}):(await o(l.credential_source,e,s.logger)(s))(),g={RoleArn:l.role_arn,RoleSessionName:l.role_session_name||`aws-sdk-js-${Date.now()}`,ExternalId:l.external_id,DurationSeconds:parseInt(l.duration_seconds||"3600",10)},{mfa_serial:f}=l;if(f){if(!s.mfaCodeProvider)throw new i.mV(`Profile ${e} requires multi-factor authentication, but no MFA code callback was provided.`,{logger:s.logger,tryNextLink:!1});g.SerialNumber=f,g.TokenCode=await s.mfaCodeProvider(f)}let u=await c;return s.roleAssumer(u,g)},c=e=>!!e&&"object"==typeof e&&"string"==typeof e.credential_process,g=async(e,r)=>n.e(795).then(n.bind(n,5795)).then(({fromProcess:n})=>n({...e,profile:r})()),f=async(e,r={})=>{let{fromSSO:t}=await n.e(750).then(n.bind(n,750));return t({profile:e,logger:r.logger})()},u=e=>e&&("string"==typeof e.sso_start_url||"string"==typeof e.sso_account_id||"string"==typeof e.sso_session||"string"==typeof e.sso_region||"string"==typeof e.sso_role_name),_=e=>!!e&&"object"==typeof e&&"string"==typeof e.aws_access_key_id&&"string"==typeof e.aws_secret_access_key&&["undefined","string"].indexOf(typeof e.aws_session_token)>-1&&["undefined","string"].indexOf(typeof e.aws_account_id)>-1,p=(e,r)=>(r?.logger?.debug("@aws-sdk/credential-provider-ini - resolveStaticCredentials"),Promise.resolve({accessKeyId:e.aws_access_key_id,secretAccessKey:e.aws_secret_access_key,sessionToken:e.aws_session_token,...e.aws_credential_scope&&{credentialScope:e.aws_credential_scope},...e.aws_account_id&&{accountId:e.aws_account_id}})),y=e=>!!e&&"object"==typeof e&&"string"==typeof e.web_identity_token_file&&"string"==typeof e.role_arn&&["undefined","string"].indexOf(typeof e.role_session_name)>-1,w=async(e,r)=>n.e(679).then(n.bind(n,2679)).then(({fromTokenFile:n})=>n({webIdentityTokenFile:e.web_identity_token_file,roleArn:e.role_arn,roleSessionName:e.role_session_name,roleAssumerWithWebIdentity:r.roleAssumerWithWebIdentity,logger:r.logger,parentClientConfig:r.parentClientConfig})()),m=async(e,r,n,t={})=>{let o=r[e];if(Object.keys(t).length>0&&_(o))return p(o,n);if(s(o,{profile:e,logger:n.logger}))return d(e,r,n,t);if(_(o))return p(o,n);if(y(o))return w(o,n);if(c(o))return g(n,e);if(u(o))return await f(e,n);throw new i.mV(`Could not resolve credentials using profile: [${e}] in configuration/credentials file(s).`,{logger:n.logger})},b=(e={})=>async()=>{e.logger?.debug("@aws-sdk/credential-provider-ini - fromIni");let r=await (0,t.MX)(e);return m((0,t.Jl)(e),r,e)}}};